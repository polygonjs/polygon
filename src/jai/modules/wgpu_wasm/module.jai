//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



WGPU_ARRAY_LAYER_COUNT_UNDEFINED :: 0xffffffff;
WGPU_COPY_STRIDE_UNDEFINED :: 0xffffffff;
WGPU_LIMIT_U32_UNDEFINED :: 0xffffffff;
WGPU_LIMIT_U64_UNDEFINED :: 0xffffffffffffffff;
WGPU_MIP_LEVEL_COUNT_UNDEFINED :: 0xffffffff;
WGPU_QUERY_SET_INDEX_UNDEFINED :: 0xffffffff;

WGPU_WHOLE_SIZE :: 0xffffffffffffffff;

WGPUFlags :: u32;
WGPUBool :: u32;

WGPUAdapterImpl :: struct {}
WGPUAdapter :: *WGPUAdapterImpl;
WGPUBindGroupImpl :: struct {}
WGPUBindGroup :: *WGPUBindGroupImpl;
WGPUBindGroupLayoutImpl :: struct {}
WGPUBindGroupLayout :: *WGPUBindGroupLayoutImpl;
WGPUBufferImpl :: struct {}
WGPUBuffer :: *WGPUBufferImpl;
WGPUCommandBufferImpl :: struct {}
WGPUCommandBuffer :: *WGPUCommandBufferImpl;
WGPUCommandEncoderImpl :: struct {}
WGPUCommandEncoder :: *WGPUCommandEncoderImpl;
WGPUComputePassEncoderImpl :: struct {}
WGPUComputePassEncoder :: *WGPUComputePassEncoderImpl;
WGPUComputePipelineImpl :: struct {}
WGPUComputePipeline :: *WGPUComputePipelineImpl;
WGPUDeviceImpl :: struct {}
WGPUDevice :: *WGPUDeviceImpl;
WGPUInstanceImpl :: struct {}
WGPUInstance :: *WGPUInstanceImpl;
WGPUPipelineLayoutImpl :: struct {}
WGPUPipelineLayout :: *WGPUPipelineLayoutImpl;
WGPUQuerySetImpl :: struct {}
WGPUQuerySet :: *WGPUQuerySetImpl;
WGPUQueueImpl :: struct {}
WGPUQueue :: *WGPUQueueImpl;
WGPURenderBundleImpl :: struct {}
WGPURenderBundle :: *WGPURenderBundleImpl;
WGPURenderBundleEncoderImpl :: struct {}
WGPURenderBundleEncoder :: *WGPURenderBundleEncoderImpl;
WGPURenderPassEncoderImpl :: struct {}
WGPURenderPassEncoder :: *WGPURenderPassEncoderImpl;
WGPURenderPipelineImpl :: struct {}
WGPURenderPipeline :: *WGPURenderPipelineImpl;
WGPUSamplerImpl :: struct {}
WGPUSampler :: *WGPUSamplerImpl;
WGPUShaderModuleImpl :: struct {}
WGPUShaderModule :: *WGPUShaderModuleImpl;
WGPUSurfaceImpl :: struct {}
WGPUSurface :: *WGPUSurfaceImpl;
WGPUTextureImpl :: struct {}
WGPUTexture :: *WGPUTextureImpl;
WGPUTextureViewImpl :: struct {}
WGPUTextureView :: *WGPUTextureViewImpl;

WGPUAdapterType :: enum u32 {
    DiscreteGPU   :: 0;
    IntegratedGPU :: 1;
    CPU           :: 2;
    Unknown       :: 3;
    Force32       :: 2147483647;

    WGPUAdapterType_DiscreteGPU   :: DiscreteGPU;
    WGPUAdapterType_IntegratedGPU :: IntegratedGPU;
    WGPUAdapterType_CPU           :: CPU;
    WGPUAdapterType_Unknown       :: Unknown;
    WGPUAdapterType_Force32       :: Force32;
}

WGPUAddressMode :: enum u32 {
    Repeat       :: 0;
    MirrorRepeat :: 1;
    ClampToEdge  :: 2;
    Force32      :: 2147483647;

    WGPUAddressMode_Repeat       :: Repeat;
    WGPUAddressMode_MirrorRepeat :: MirrorRepeat;
    WGPUAddressMode_ClampToEdge  :: ClampToEdge;
    WGPUAddressMode_Force32      :: Force32;
}

WGPUBackendType :: enum u32 {
    Undefined :: 0;
    Null      :: 1;
    WebGPU    :: 2;
    D3D11     :: 3;
    D3D12     :: 4;
    Metal     :: 5;
    Vulkan    :: 6;
    OpenGL    :: 7;
    OpenGLES  :: 8;
    Force32   :: 2147483647;

    WGPUBackendType_Undefined :: Undefined;
    WGPUBackendType_Null      :: Null;
    WGPUBackendType_WebGPU    :: WebGPU;
    WGPUBackendType_D3D11     :: D3D11;
    WGPUBackendType_D3D12     :: D3D12;
    WGPUBackendType_Metal     :: Metal;
    WGPUBackendType_Vulkan    :: Vulkan;
    WGPUBackendType_OpenGL    :: OpenGL;
    WGPUBackendType_OpenGLES  :: OpenGLES;
    WGPUBackendType_Force32   :: Force32;
}

WGPUBlendFactor :: enum u32 {
    Zero              :: 0;
    One               :: 1;
    Src               :: 2;
    OneMinusSrc       :: 3;
    SrcAlpha          :: 4;
    OneMinusSrcAlpha  :: 5;
    Dst               :: 6;
    OneMinusDst       :: 7;
    DstAlpha          :: 8;
    OneMinusDstAlpha  :: 9;
    SrcAlphaSaturated :: 10;
    Constant          :: 11;
    OneMinusConstant  :: 12;
    Force32           :: 2147483647;

    WGPUBlendFactor_Zero              :: Zero;
    WGPUBlendFactor_One               :: One;
    WGPUBlendFactor_Src               :: Src;
    WGPUBlendFactor_OneMinusSrc       :: OneMinusSrc;
    WGPUBlendFactor_SrcAlpha          :: SrcAlpha;
    WGPUBlendFactor_OneMinusSrcAlpha  :: OneMinusSrcAlpha;
    WGPUBlendFactor_Dst               :: Dst;
    WGPUBlendFactor_OneMinusDst       :: OneMinusDst;
    WGPUBlendFactor_DstAlpha          :: DstAlpha;
    WGPUBlendFactor_OneMinusDstAlpha  :: OneMinusDstAlpha;
    WGPUBlendFactor_SrcAlphaSaturated :: SrcAlphaSaturated;
    WGPUBlendFactor_Constant          :: Constant;
    WGPUBlendFactor_OneMinusConstant  :: OneMinusConstant;
    WGPUBlendFactor_Force32           :: Force32;
}

WGPUBlendOperation :: enum u32 {
    Add             :: 0;
    Subtract        :: 1;
    ReverseSubtract :: 2;
    Min             :: 3;
    Max             :: 4;
    Force32         :: 2147483647;

    WGPUBlendOperation_Add             :: Add;
    WGPUBlendOperation_Subtract        :: Subtract;
    WGPUBlendOperation_ReverseSubtract :: ReverseSubtract;
    WGPUBlendOperation_Min             :: Min;
    WGPUBlendOperation_Max             :: Max;
    WGPUBlendOperation_Force32         :: Force32;
}

WGPUBufferBindingType :: enum u32 {
    Undefined       :: 0;
    Uniform         :: 1;
    Storage         :: 2;
    ReadOnlyStorage :: 3;
    Force32         :: 2147483647;

    WGPUBufferBindingType_Undefined       :: Undefined;
    WGPUBufferBindingType_Uniform         :: Uniform;
    WGPUBufferBindingType_Storage         :: Storage;
    WGPUBufferBindingType_ReadOnlyStorage :: ReadOnlyStorage;
    WGPUBufferBindingType_Force32         :: Force32;
}

WGPUBufferMapAsyncStatus :: enum u32 {
    Success                 :: 0;
    ValidationError         :: 1;
    Unknown                 :: 2;
    DeviceLost              :: 3;
    DestroyedBeforeCallback :: 4;
    UnmappedBeforeCallback  :: 5;
    MappingAlreadyPending   :: 6;
    OffsetOutOfRange        :: 7;
    SizeOutOfRange          :: 8;
    Force32                 :: 2147483647;

    WGPUBufferMapAsyncStatus_Success                 :: Success;
    WGPUBufferMapAsyncStatus_ValidationError         :: ValidationError;
    WGPUBufferMapAsyncStatus_Unknown                 :: Unknown;
    WGPUBufferMapAsyncStatus_DeviceLost              :: DeviceLost;
    WGPUBufferMapAsyncStatus_DestroyedBeforeCallback :: DestroyedBeforeCallback;
    WGPUBufferMapAsyncStatus_UnmappedBeforeCallback  :: UnmappedBeforeCallback;
    WGPUBufferMapAsyncStatus_MappingAlreadyPending   :: MappingAlreadyPending;
    WGPUBufferMapAsyncStatus_OffsetOutOfRange        :: OffsetOutOfRange;
    WGPUBufferMapAsyncStatus_SizeOutOfRange          :: SizeOutOfRange;
    WGPUBufferMapAsyncStatus_Force32                 :: Force32;
}

WGPUBufferMapState :: enum u32 {
    Unmapped :: 0;
    Pending  :: 1;
    Mapped   :: 2;
    Force32  :: 2147483647;

    WGPUBufferMapState_Unmapped :: Unmapped;
    WGPUBufferMapState_Pending  :: Pending;
    WGPUBufferMapState_Mapped   :: Mapped;
    WGPUBufferMapState_Force32  :: Force32;
}

WGPUCompareFunction :: enum u32 {
    Undefined    :: 0;
    Never        :: 1;
    Less         :: 2;
    LessEqual    :: 3;
    Greater      :: 4;
    GreaterEqual :: 5;
    Equal        :: 6;
    NotEqual     :: 7;
    Always       :: 8;
    Force32      :: 2147483647;

    WGPUCompareFunction_Undefined    :: Undefined;
    WGPUCompareFunction_Never        :: Never;
    WGPUCompareFunction_Less         :: Less;
    WGPUCompareFunction_LessEqual    :: LessEqual;
    WGPUCompareFunction_Greater      :: Greater;
    WGPUCompareFunction_GreaterEqual :: GreaterEqual;
    WGPUCompareFunction_Equal        :: Equal;
    WGPUCompareFunction_NotEqual     :: NotEqual;
    WGPUCompareFunction_Always       :: Always;
    WGPUCompareFunction_Force32      :: Force32;
}

WGPUCompilationInfoRequestStatus :: enum u32 {
    Success    :: 0;
    Error      :: 1;
    DeviceLost :: 2;
    Unknown    :: 3;
    Force32    :: 2147483647;

    WGPUCompilationInfoRequestStatus_Success    :: Success;
    WGPUCompilationInfoRequestStatus_Error      :: Error;
    WGPUCompilationInfoRequestStatus_DeviceLost :: DeviceLost;
    WGPUCompilationInfoRequestStatus_Unknown    :: Unknown;
    WGPUCompilationInfoRequestStatus_Force32    :: Force32;
}

WGPUCompilationMessageType :: enum u32 {
    Error   :: 0;
    Warning :: 1;
    Info    :: 2;
    Force32 :: 2147483647;

    WGPUCompilationMessageType_Error   :: Error;
    WGPUCompilationMessageType_Warning :: Warning;
    WGPUCompilationMessageType_Info    :: Info;
    WGPUCompilationMessageType_Force32 :: Force32;
}

WGPUCompositeAlphaMode :: enum u32 {
    Auto            :: 0;
    Opaque          :: 1;
    Premultiplied   :: 2;
    Unpremultiplied :: 3;
    Inherit         :: 4;
    Force32         :: 2147483647;

    WGPUCompositeAlphaMode_Auto            :: Auto;
    WGPUCompositeAlphaMode_Opaque          :: Opaque;
    WGPUCompositeAlphaMode_Premultiplied   :: Premultiplied;
    WGPUCompositeAlphaMode_Unpremultiplied :: Unpremultiplied;
    WGPUCompositeAlphaMode_Inherit         :: Inherit;
    WGPUCompositeAlphaMode_Force32         :: Force32;
}

WGPUCreatePipelineAsyncStatus :: enum u32 {
    Success         :: 0;
    ValidationError :: 1;
    InternalError   :: 2;
    DeviceLost      :: 3;
    DeviceDestroyed :: 4;
    Unknown         :: 5;
    Force32         :: 2147483647;

    WGPUCreatePipelineAsyncStatus_Success         :: Success;
    WGPUCreatePipelineAsyncStatus_ValidationError :: ValidationError;
    WGPUCreatePipelineAsyncStatus_InternalError   :: InternalError;
    WGPUCreatePipelineAsyncStatus_DeviceLost      :: DeviceLost;
    WGPUCreatePipelineAsyncStatus_DeviceDestroyed :: DeviceDestroyed;
    WGPUCreatePipelineAsyncStatus_Unknown         :: Unknown;
    WGPUCreatePipelineAsyncStatus_Force32         :: Force32;
}

WGPUCullMode :: enum u32 {
    None    :: 0;
    Front   :: 1;
    Back    :: 2;
    Force32 :: 2147483647;

    WGPUCullMode_None    :: None;
    WGPUCullMode_Front   :: Front;
    WGPUCullMode_Back    :: Back;
    WGPUCullMode_Force32 :: Force32;
}

WGPUDeviceLostReason :: enum u32 {
    Undefined :: 0;
    Destroyed :: 1;
    Force32   :: 2147483647;

    WGPUDeviceLostReason_Undefined :: Undefined;
    WGPUDeviceLostReason_Destroyed :: Destroyed;
    WGPUDeviceLostReason_Force32   :: Force32;
}

WGPUErrorFilter :: enum u32 {
    Validation  :: 0;
    OutOfMemory :: 1;
    Internal    :: 2;
    Force32     :: 2147483647;

    WGPUErrorFilter_Validation  :: Validation;
    WGPUErrorFilter_OutOfMemory :: OutOfMemory;
    WGPUErrorFilter_Internal    :: Internal;
    WGPUErrorFilter_Force32     :: Force32;
}

WGPUErrorType :: enum u32 {
    NoError     :: 0;
    Validation  :: 1;
    OutOfMemory :: 2;
    Internal    :: 3;
    Unknown     :: 4;
    DeviceLost  :: 5;
    Force32     :: 2147483647;

    WGPUErrorType_NoError     :: NoError;
    WGPUErrorType_Validation  :: Validation;
    WGPUErrorType_OutOfMemory :: OutOfMemory;
    WGPUErrorType_Internal    :: Internal;
    WGPUErrorType_Unknown     :: Unknown;
    WGPUErrorType_DeviceLost  :: DeviceLost;
    WGPUErrorType_Force32     :: Force32;
}

WGPUFeatureName :: enum u32 {
    Undefined               :: 0;
    DepthClipControl        :: 1;
    Depth32FloatStencil8    :: 2;
    TimestampQuery          :: 3;
    TextureCompressionBC    :: 4;
    TextureCompressionETC2  :: 5;
    TextureCompressionASTC  :: 6;
    IndirectFirstInstance   :: 7;
    ShaderF16               :: 8;
    RG11B10UfloatRenderable :: 9;
    BGRA8UnormStorage       :: 10;
    Float32Filterable       :: 11;
    Force32                 :: 2147483647;

    WGPUFeatureName_Undefined               :: Undefined;
    WGPUFeatureName_DepthClipControl        :: DepthClipControl;
    WGPUFeatureName_Depth32FloatStencil8    :: Depth32FloatStencil8;
    WGPUFeatureName_TimestampQuery          :: TimestampQuery;
    WGPUFeatureName_TextureCompressionBC    :: TextureCompressionBC;
    WGPUFeatureName_TextureCompressionETC2  :: TextureCompressionETC2;
    WGPUFeatureName_TextureCompressionASTC  :: TextureCompressionASTC;
    WGPUFeatureName_IndirectFirstInstance   :: IndirectFirstInstance;
    WGPUFeatureName_ShaderF16               :: ShaderF16;
    WGPUFeatureName_RG11B10UfloatRenderable :: RG11B10UfloatRenderable;
    WGPUFeatureName_BGRA8UnormStorage       :: BGRA8UnormStorage;
    WGPUFeatureName_Float32Filterable       :: Float32Filterable;
    WGPUFeatureName_Force32                 :: Force32;
}

WGPUFilterMode :: enum u32 {
    Nearest :: 0;
    Linear  :: 1;
    Force32 :: 2147483647;

    WGPUFilterMode_Nearest :: Nearest;
    WGPUFilterMode_Linear  :: Linear;
    WGPUFilterMode_Force32 :: Force32;
}

WGPUFrontFace :: enum u32 {
    CCW     :: 0;
    CW      :: 1;
    Force32 :: 2147483647;

    WGPUFrontFace_CCW     :: CCW;
    WGPUFrontFace_CW      :: CW;
    WGPUFrontFace_Force32 :: Force32;
}

WGPUIndexFormat :: enum u32 {
    Undefined :: 0;
    Uint16    :: 1;
    Uint32    :: 2;
    Force32   :: 2147483647;

    WGPUIndexFormat_Undefined :: Undefined;
    WGPUIndexFormat_Uint16    :: Uint16;
    WGPUIndexFormat_Uint32    :: Uint32;
    WGPUIndexFormat_Force32   :: Force32;
}

WGPULoadOp :: enum u32 {
    Undefined :: 0;
    Clear     :: 1;
    Load      :: 2;
    Force32   :: 2147483647;

    WGPULoadOp_Undefined :: Undefined;
    WGPULoadOp_Clear     :: Clear;
    WGPULoadOp_Load      :: Load;
    WGPULoadOp_Force32   :: Force32;
}

WGPUMipmapFilterMode :: enum u32 {
    Nearest :: 0;
    Linear  :: 1;
    Force32 :: 2147483647;

    WGPUMipmapFilterMode_Nearest :: Nearest;
    WGPUMipmapFilterMode_Linear  :: Linear;
    WGPUMipmapFilterMode_Force32 :: Force32;
}

WGPUPowerPreference :: enum u32 {
    Undefined       :: 0;
    LowPower        :: 1;
    HighPerformance :: 2;
    Force32         :: 2147483647;

    WGPUPowerPreference_Undefined       :: Undefined;
    WGPUPowerPreference_LowPower        :: LowPower;
    WGPUPowerPreference_HighPerformance :: HighPerformance;
    WGPUPowerPreference_Force32         :: Force32;
}

WGPUPresentMode :: enum u32 {
    Fifo        :: 0;
    FifoRelaxed :: 1;
    Immediate   :: 2;
    Mailbox     :: 3;
    Force32     :: 2147483647;

    WGPUPresentMode_Fifo        :: Fifo;
    WGPUPresentMode_FifoRelaxed :: FifoRelaxed;
    WGPUPresentMode_Immediate   :: Immediate;
    WGPUPresentMode_Mailbox     :: Mailbox;
    WGPUPresentMode_Force32     :: Force32;
}

WGPUPrimitiveTopology :: enum u32 {
    PointList     :: 0;
    LineList      :: 1;
    LineStrip     :: 2;
    TriangleList  :: 3;
    TriangleStrip :: 4;
    Force32       :: 2147483647;

    WGPUPrimitiveTopology_PointList     :: PointList;
    WGPUPrimitiveTopology_LineList      :: LineList;
    WGPUPrimitiveTopology_LineStrip     :: LineStrip;
    WGPUPrimitiveTopology_TriangleList  :: TriangleList;
    WGPUPrimitiveTopology_TriangleStrip :: TriangleStrip;
    WGPUPrimitiveTopology_Force32       :: Force32;
}

WGPUQueryType :: enum u32 {
    Occlusion :: 0;
    Timestamp :: 1;
    Force32   :: 2147483647;

    WGPUQueryType_Occlusion :: Occlusion;
    WGPUQueryType_Timestamp :: Timestamp;
    WGPUQueryType_Force32   :: Force32;
}

WGPUQueueWorkDoneStatus :: enum u32 {
    Success    :: 0;
    Error      :: 1;
    Unknown    :: 2;
    DeviceLost :: 3;
    Force32    :: 2147483647;

    WGPUQueueWorkDoneStatus_Success    :: Success;
    WGPUQueueWorkDoneStatus_Error      :: Error;
    WGPUQueueWorkDoneStatus_Unknown    :: Unknown;
    WGPUQueueWorkDoneStatus_DeviceLost :: DeviceLost;
    WGPUQueueWorkDoneStatus_Force32    :: Force32;
}

WGPURequestAdapterStatus :: enum u32 {
    Success     :: 0;
    Unavailable :: 1;
    Error       :: 2;
    Unknown     :: 3;
    Force32     :: 2147483647;

    WGPURequestAdapterStatus_Success     :: Success;
    WGPURequestAdapterStatus_Unavailable :: Unavailable;
    WGPURequestAdapterStatus_Error       :: Error;
    WGPURequestAdapterStatus_Unknown     :: Unknown;
    WGPURequestAdapterStatus_Force32     :: Force32;
}

WGPURequestDeviceStatus :: enum u32 {
    Success :: 0;
    Error   :: 1;
    Unknown :: 2;
    Force32 :: 2147483647;

    WGPURequestDeviceStatus_Success :: Success;
    WGPURequestDeviceStatus_Error   :: Error;
    WGPURequestDeviceStatus_Unknown :: Unknown;
    WGPURequestDeviceStatus_Force32 :: Force32;
}

WGPUSType :: enum u32 {
    Invalid                                  :: 0;
    SurfaceDescriptorFromMetalLayer          :: 1;
    SurfaceDescriptorFromWindowsHWND         :: 2;
    SurfaceDescriptorFromXlibWindow          :: 3;
    SurfaceDescriptorFromCanvasHTMLSelector  :: 4;
    ShaderModuleSPIRVDescriptor              :: 5;
    ShaderModuleWGSLDescriptor               :: 6;
    PrimitiveDepthClipControl                :: 7;
    SurfaceDescriptorFromWaylandSurface      :: 8;
    SurfaceDescriptorFromAndroidNativeWindow :: 9;
    SurfaceDescriptorFromXcbWindow           :: 10;
    RenderPassDescriptorMaxDrawCount         :: 15;
    Force32                                  :: 2147483647;

    WGPUSType_Invalid                                  :: Invalid;
    WGPUSType_SurfaceDescriptorFromMetalLayer          :: SurfaceDescriptorFromMetalLayer;
    WGPUSType_SurfaceDescriptorFromWindowsHWND         :: SurfaceDescriptorFromWindowsHWND;
    WGPUSType_SurfaceDescriptorFromXlibWindow          :: SurfaceDescriptorFromXlibWindow;
    WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector  :: SurfaceDescriptorFromCanvasHTMLSelector;
    WGPUSType_ShaderModuleSPIRVDescriptor              :: ShaderModuleSPIRVDescriptor;
    WGPUSType_ShaderModuleWGSLDescriptor               :: ShaderModuleWGSLDescriptor;
    WGPUSType_PrimitiveDepthClipControl                :: PrimitiveDepthClipControl;
    WGPUSType_SurfaceDescriptorFromWaylandSurface      :: SurfaceDescriptorFromWaylandSurface;
    WGPUSType_SurfaceDescriptorFromAndroidNativeWindow :: SurfaceDescriptorFromAndroidNativeWindow;
    WGPUSType_SurfaceDescriptorFromXcbWindow           :: SurfaceDescriptorFromXcbWindow;
    WGPUSType_RenderPassDescriptorMaxDrawCount         :: RenderPassDescriptorMaxDrawCount;
    WGPUSType_Force32                                  :: Force32;
}

WGPUSamplerBindingType :: enum u32 {
    Undefined    :: 0;
    Filtering    :: 1;
    NonFiltering :: 2;
    Comparison   :: 3;
    Force32      :: 2147483647;

    WGPUSamplerBindingType_Undefined    :: Undefined;
    WGPUSamplerBindingType_Filtering    :: Filtering;
    WGPUSamplerBindingType_NonFiltering :: NonFiltering;
    WGPUSamplerBindingType_Comparison   :: Comparison;
    WGPUSamplerBindingType_Force32      :: Force32;
}

WGPUStencilOperation :: enum u32 {
    Keep           :: 0;
    Zero           :: 1;
    Replace        :: 2;
    Invert         :: 3;
    IncrementClamp :: 4;
    DecrementClamp :: 5;
    IncrementWrap  :: 6;
    DecrementWrap  :: 7;
    Force32        :: 2147483647;

    WGPUStencilOperation_Keep           :: Keep;
    WGPUStencilOperation_Zero           :: Zero;
    WGPUStencilOperation_Replace        :: Replace;
    WGPUStencilOperation_Invert         :: Invert;
    WGPUStencilOperation_IncrementClamp :: IncrementClamp;
    WGPUStencilOperation_DecrementClamp :: DecrementClamp;
    WGPUStencilOperation_IncrementWrap  :: IncrementWrap;
    WGPUStencilOperation_DecrementWrap  :: DecrementWrap;
    WGPUStencilOperation_Force32        :: Force32;
}

WGPUStorageTextureAccess :: enum u32 {
    Undefined :: 0;
    WriteOnly :: 1;
    ReadOnly  :: 2;
    ReadWrite :: 3;
    Force32   :: 2147483647;

    WGPUStorageTextureAccess_Undefined :: Undefined;
    WGPUStorageTextureAccess_WriteOnly :: WriteOnly;
    WGPUStorageTextureAccess_ReadOnly  :: ReadOnly;
    WGPUStorageTextureAccess_ReadWrite :: ReadWrite;
    WGPUStorageTextureAccess_Force32   :: Force32;
}

WGPUStoreOp :: enum u32 {
    Undefined :: 0;
    Store     :: 1;
    Discard   :: 2;
    Force32   :: 2147483647;

    WGPUStoreOp_Undefined :: Undefined;
    WGPUStoreOp_Store     :: Store;
    WGPUStoreOp_Discard   :: Discard;
    WGPUStoreOp_Force32   :: Force32;
}

WGPUSurfaceGetCurrentTextureStatus :: enum u32 {
    Success     :: 0;
    Timeout     :: 1;
    Outdated    :: 2;
    Lost        :: 3;
    OutOfMemory :: 4;
    DeviceLost  :: 5;
    Force32     :: 2147483647;

    WGPUSurfaceGetCurrentTextureStatus_Success     :: Success;
    WGPUSurfaceGetCurrentTextureStatus_Timeout     :: Timeout;
    WGPUSurfaceGetCurrentTextureStatus_Outdated    :: Outdated;
    WGPUSurfaceGetCurrentTextureStatus_Lost        :: Lost;
    WGPUSurfaceGetCurrentTextureStatus_OutOfMemory :: OutOfMemory;
    WGPUSurfaceGetCurrentTextureStatus_DeviceLost  :: DeviceLost;
    WGPUSurfaceGetCurrentTextureStatus_Force32     :: Force32;
}

WGPUTextureAspect :: enum u32 {
    All         :: 0;
    StencilOnly :: 1;
    DepthOnly   :: 2;
    Force32     :: 2147483647;

    WGPUTextureAspect_All         :: All;
    WGPUTextureAspect_StencilOnly :: StencilOnly;
    WGPUTextureAspect_DepthOnly   :: DepthOnly;
    WGPUTextureAspect_Force32     :: Force32;
}

WGPUTextureDimension :: enum u32 {
    _1D     :: 0;
    _2D     :: 1;
    _3D     :: 2;
    Force32 :: 2147483647;

    WGPUTextureDimension_1D      :: _1D;
    WGPUTextureDimension_2D      :: _2D;
    WGPUTextureDimension_3D      :: _3D;
    WGPUTextureDimension_Force32 :: Force32;
}

WGPUTextureFormat :: enum u32 {
    Undefined            :: 0;
    R8Unorm              :: 1;
    R8Snorm              :: 2;
    R8Uint               :: 3;
    R8Sint               :: 4;
    R16Uint              :: 5;
    R16Sint              :: 6;
    R16Float             :: 7;
    RG8Unorm             :: 8;
    RG8Snorm             :: 9;
    RG8Uint              :: 10;
    RG8Sint              :: 11;
    R32Float             :: 12;
    R32Uint              :: 13;
    R32Sint              :: 14;
    RG16Uint             :: 15;
    RG16Sint             :: 16;
    RG16Float            :: 17;
    RGBA8Unorm           :: 18;
    RGBA8UnormSrgb       :: 19;
    RGBA8Snorm           :: 20;
    RGBA8Uint            :: 21;
    RGBA8Sint            :: 22;
    BGRA8Unorm           :: 23;
    BGRA8UnormSrgb       :: 24;
    RGB10A2Uint          :: 25;
    RGB10A2Unorm         :: 26;
    RG11B10Ufloat        :: 27;
    RGB9E5Ufloat         :: 28;
    RG32Float            :: 29;
    RG32Uint             :: 30;
    RG32Sint             :: 31;
    RGBA16Uint           :: 32;
    RGBA16Sint           :: 33;
    RGBA16Float          :: 34;
    RGBA32Float          :: 35;
    RGBA32Uint           :: 36;
    RGBA32Sint           :: 37;
    Stencil8             :: 38;
    Depth16Unorm         :: 39;
    Depth24Plus          :: 40;
    Depth24PlusStencil8  :: 41;
    Depth32Float         :: 42;
    Depth32FloatStencil8 :: 43;
    BC1RGBAUnorm         :: 44;
    BC1RGBAUnormSrgb     :: 45;
    BC2RGBAUnorm         :: 46;
    BC2RGBAUnormSrgb     :: 47;
    BC3RGBAUnorm         :: 48;
    BC3RGBAUnormSrgb     :: 49;
    BC4RUnorm            :: 50;
    BC4RSnorm            :: 51;
    BC5RGUnorm           :: 52;
    BC5RGSnorm           :: 53;
    BC6HRGBUfloat        :: 54;
    BC6HRGBFloat         :: 55;
    BC7RGBAUnorm         :: 56;
    BC7RGBAUnormSrgb     :: 57;
    ETC2RGB8Unorm        :: 58;
    ETC2RGB8UnormSrgb    :: 59;
    ETC2RGB8A1Unorm      :: 60;
    ETC2RGB8A1UnormSrgb  :: 61;
    ETC2RGBA8Unorm       :: 62;
    ETC2RGBA8UnormSrgb   :: 63;
    EACR11Unorm          :: 64;
    EACR11Snorm          :: 65;
    EACRG11Unorm         :: 66;
    EACRG11Snorm         :: 67;
    ASTC4x4Unorm         :: 68;
    ASTC4x4UnormSrgb     :: 69;
    ASTC5x4Unorm         :: 70;
    ASTC5x4UnormSrgb     :: 71;
    ASTC5x5Unorm         :: 72;
    ASTC5x5UnormSrgb     :: 73;
    ASTC6x5Unorm         :: 74;
    ASTC6x5UnormSrgb     :: 75;
    ASTC6x6Unorm         :: 76;
    ASTC6x6UnormSrgb     :: 77;
    ASTC8x5Unorm         :: 78;
    ASTC8x5UnormSrgb     :: 79;
    ASTC8x6Unorm         :: 80;
    ASTC8x6UnormSrgb     :: 81;
    ASTC8x8Unorm         :: 82;
    ASTC8x8UnormSrgb     :: 83;
    ASTC10x5Unorm        :: 84;
    ASTC10x5UnormSrgb    :: 85;
    ASTC10x6Unorm        :: 86;
    ASTC10x6UnormSrgb    :: 87;
    ASTC10x8Unorm        :: 88;
    ASTC10x8UnormSrgb    :: 89;
    ASTC10x10Unorm       :: 90;
    ASTC10x10UnormSrgb   :: 91;
    ASTC12x10Unorm       :: 92;
    ASTC12x10UnormSrgb   :: 93;
    ASTC12x12Unorm       :: 94;
    ASTC12x12UnormSrgb   :: 95;
    Force32              :: 2147483647;

    WGPUTextureFormat_Undefined            :: Undefined;
    WGPUTextureFormat_R8Unorm              :: R8Unorm;
    WGPUTextureFormat_R8Snorm              :: R8Snorm;
    WGPUTextureFormat_R8Uint               :: R8Uint;
    WGPUTextureFormat_R8Sint               :: R8Sint;
    WGPUTextureFormat_R16Uint              :: R16Uint;
    WGPUTextureFormat_R16Sint              :: R16Sint;
    WGPUTextureFormat_R16Float             :: R16Float;
    WGPUTextureFormat_RG8Unorm             :: RG8Unorm;
    WGPUTextureFormat_RG8Snorm             :: RG8Snorm;
    WGPUTextureFormat_RG8Uint              :: RG8Uint;
    WGPUTextureFormat_RG8Sint              :: RG8Sint;
    WGPUTextureFormat_R32Float             :: R32Float;
    WGPUTextureFormat_R32Uint              :: R32Uint;
    WGPUTextureFormat_R32Sint              :: R32Sint;
    WGPUTextureFormat_RG16Uint             :: RG16Uint;
    WGPUTextureFormat_RG16Sint             :: RG16Sint;
    WGPUTextureFormat_RG16Float            :: RG16Float;
    WGPUTextureFormat_RGBA8Unorm           :: RGBA8Unorm;
    WGPUTextureFormat_RGBA8UnormSrgb       :: RGBA8UnormSrgb;
    WGPUTextureFormat_RGBA8Snorm           :: RGBA8Snorm;
    WGPUTextureFormat_RGBA8Uint            :: RGBA8Uint;
    WGPUTextureFormat_RGBA8Sint            :: RGBA8Sint;
    WGPUTextureFormat_BGRA8Unorm           :: BGRA8Unorm;
    WGPUTextureFormat_BGRA8UnormSrgb       :: BGRA8UnormSrgb;
    WGPUTextureFormat_RGB10A2Uint          :: RGB10A2Uint;
    WGPUTextureFormat_RGB10A2Unorm         :: RGB10A2Unorm;
    WGPUTextureFormat_RG11B10Ufloat        :: RG11B10Ufloat;
    WGPUTextureFormat_RGB9E5Ufloat         :: RGB9E5Ufloat;
    WGPUTextureFormat_RG32Float            :: RG32Float;
    WGPUTextureFormat_RG32Uint             :: RG32Uint;
    WGPUTextureFormat_RG32Sint             :: RG32Sint;
    WGPUTextureFormat_RGBA16Uint           :: RGBA16Uint;
    WGPUTextureFormat_RGBA16Sint           :: RGBA16Sint;
    WGPUTextureFormat_RGBA16Float          :: RGBA16Float;
    WGPUTextureFormat_RGBA32Float          :: RGBA32Float;
    WGPUTextureFormat_RGBA32Uint           :: RGBA32Uint;
    WGPUTextureFormat_RGBA32Sint           :: RGBA32Sint;
    WGPUTextureFormat_Stencil8             :: Stencil8;
    WGPUTextureFormat_Depth16Unorm         :: Depth16Unorm;
    WGPUTextureFormat_Depth24Plus          :: Depth24Plus;
    WGPUTextureFormat_Depth24PlusStencil8  :: Depth24PlusStencil8;
    WGPUTextureFormat_Depth32Float         :: Depth32Float;
    WGPUTextureFormat_Depth32FloatStencil8 :: Depth32FloatStencil8;
    WGPUTextureFormat_BC1RGBAUnorm         :: BC1RGBAUnorm;
    WGPUTextureFormat_BC1RGBAUnormSrgb     :: BC1RGBAUnormSrgb;
    WGPUTextureFormat_BC2RGBAUnorm         :: BC2RGBAUnorm;
    WGPUTextureFormat_BC2RGBAUnormSrgb     :: BC2RGBAUnormSrgb;
    WGPUTextureFormat_BC3RGBAUnorm         :: BC3RGBAUnorm;
    WGPUTextureFormat_BC3RGBAUnormSrgb     :: BC3RGBAUnormSrgb;
    WGPUTextureFormat_BC4RUnorm            :: BC4RUnorm;
    WGPUTextureFormat_BC4RSnorm            :: BC4RSnorm;
    WGPUTextureFormat_BC5RGUnorm           :: BC5RGUnorm;
    WGPUTextureFormat_BC5RGSnorm           :: BC5RGSnorm;
    WGPUTextureFormat_BC6HRGBUfloat        :: BC6HRGBUfloat;
    WGPUTextureFormat_BC6HRGBFloat         :: BC6HRGBFloat;
    WGPUTextureFormat_BC7RGBAUnorm         :: BC7RGBAUnorm;
    WGPUTextureFormat_BC7RGBAUnormSrgb     :: BC7RGBAUnormSrgb;
    WGPUTextureFormat_ETC2RGB8Unorm        :: ETC2RGB8Unorm;
    WGPUTextureFormat_ETC2RGB8UnormSrgb    :: ETC2RGB8UnormSrgb;
    WGPUTextureFormat_ETC2RGB8A1Unorm      :: ETC2RGB8A1Unorm;
    WGPUTextureFormat_ETC2RGB8A1UnormSrgb  :: ETC2RGB8A1UnormSrgb;
    WGPUTextureFormat_ETC2RGBA8Unorm       :: ETC2RGBA8Unorm;
    WGPUTextureFormat_ETC2RGBA8UnormSrgb   :: ETC2RGBA8UnormSrgb;
    WGPUTextureFormat_EACR11Unorm          :: EACR11Unorm;
    WGPUTextureFormat_EACR11Snorm          :: EACR11Snorm;
    WGPUTextureFormat_EACRG11Unorm         :: EACRG11Unorm;
    WGPUTextureFormat_EACRG11Snorm         :: EACRG11Snorm;
    WGPUTextureFormat_ASTC4x4Unorm         :: ASTC4x4Unorm;
    WGPUTextureFormat_ASTC4x4UnormSrgb     :: ASTC4x4UnormSrgb;
    WGPUTextureFormat_ASTC5x4Unorm         :: ASTC5x4Unorm;
    WGPUTextureFormat_ASTC5x4UnormSrgb     :: ASTC5x4UnormSrgb;
    WGPUTextureFormat_ASTC5x5Unorm         :: ASTC5x5Unorm;
    WGPUTextureFormat_ASTC5x5UnormSrgb     :: ASTC5x5UnormSrgb;
    WGPUTextureFormat_ASTC6x5Unorm         :: ASTC6x5Unorm;
    WGPUTextureFormat_ASTC6x5UnormSrgb     :: ASTC6x5UnormSrgb;
    WGPUTextureFormat_ASTC6x6Unorm         :: ASTC6x6Unorm;
    WGPUTextureFormat_ASTC6x6UnormSrgb     :: ASTC6x6UnormSrgb;
    WGPUTextureFormat_ASTC8x5Unorm         :: ASTC8x5Unorm;
    WGPUTextureFormat_ASTC8x5UnormSrgb     :: ASTC8x5UnormSrgb;
    WGPUTextureFormat_ASTC8x6Unorm         :: ASTC8x6Unorm;
    WGPUTextureFormat_ASTC8x6UnormSrgb     :: ASTC8x6UnormSrgb;
    WGPUTextureFormat_ASTC8x8Unorm         :: ASTC8x8Unorm;
    WGPUTextureFormat_ASTC8x8UnormSrgb     :: ASTC8x8UnormSrgb;
    WGPUTextureFormat_ASTC10x5Unorm        :: ASTC10x5Unorm;
    WGPUTextureFormat_ASTC10x5UnormSrgb    :: ASTC10x5UnormSrgb;
    WGPUTextureFormat_ASTC10x6Unorm        :: ASTC10x6Unorm;
    WGPUTextureFormat_ASTC10x6UnormSrgb    :: ASTC10x6UnormSrgb;
    WGPUTextureFormat_ASTC10x8Unorm        :: ASTC10x8Unorm;
    WGPUTextureFormat_ASTC10x8UnormSrgb    :: ASTC10x8UnormSrgb;
    WGPUTextureFormat_ASTC10x10Unorm       :: ASTC10x10Unorm;
    WGPUTextureFormat_ASTC10x10UnormSrgb   :: ASTC10x10UnormSrgb;
    WGPUTextureFormat_ASTC12x10Unorm       :: ASTC12x10Unorm;
    WGPUTextureFormat_ASTC12x10UnormSrgb   :: ASTC12x10UnormSrgb;
    WGPUTextureFormat_ASTC12x12Unorm       :: ASTC12x12Unorm;
    WGPUTextureFormat_ASTC12x12UnormSrgb   :: ASTC12x12UnormSrgb;
    WGPUTextureFormat_Force32              :: Force32;
}

WGPUTextureSampleType :: enum u32 {
    Undefined         :: 0;
    Float             :: 1;
    UnfilterableFloat :: 2;
    Depth             :: 3;
    Sint              :: 4;
    Uint              :: 5;
    Force32           :: 2147483647;

    WGPUTextureSampleType_Undefined         :: Undefined;
    WGPUTextureSampleType_Float             :: Float;
    WGPUTextureSampleType_UnfilterableFloat :: UnfilterableFloat;
    WGPUTextureSampleType_Depth             :: Depth;
    WGPUTextureSampleType_Sint              :: Sint;
    WGPUTextureSampleType_Uint              :: Uint;
    WGPUTextureSampleType_Force32           :: Force32;
}

WGPUTextureViewDimension :: enum u32 {
    Undefined :: 0;
    _1D       :: 1;
    _2D       :: 2;
    _2DArray  :: 3;
    Cube      :: 4;
    CubeArray :: 5;
    _3D       :: 6;
    Force32   :: 2147483647;

    WGPUTextureViewDimension_Undefined :: Undefined;
    WGPUTextureViewDimension_1D        :: _1D;
    WGPUTextureViewDimension_2D        :: _2D;
    WGPUTextureViewDimension_2DArray   :: _2DArray;
    WGPUTextureViewDimension_Cube      :: Cube;
    WGPUTextureViewDimension_CubeArray :: CubeArray;
    WGPUTextureViewDimension_3D        :: _3D;
    WGPUTextureViewDimension_Force32   :: Force32;
}

WGPUVertexFormat :: enum u32 {
    Undefined :: 0;
    Uint8x2   :: 1;
    Uint8x4   :: 2;
    Sint8x2   :: 3;
    Sint8x4   :: 4;
    Unorm8x2  :: 5;
    Unorm8x4  :: 6;
    Snorm8x2  :: 7;
    Snorm8x4  :: 8;
    Uint16x2  :: 9;
    Uint16x4  :: 10;
    Sint16x2  :: 11;
    Sint16x4  :: 12;
    Unorm16x2 :: 13;
    Unorm16x4 :: 14;
    Snorm16x2 :: 15;
    Snorm16x4 :: 16;
    Float16x2 :: 17;
    Float16x4 :: 18;
    Float32   :: 19;
    Float32x2 :: 20;
    Float32x3 :: 21;
    Float32x4 :: 22;
    Uint32    :: 23;
    Uint32x2  :: 24;
    Uint32x3  :: 25;
    Uint32x4  :: 26;
    Sint32    :: 27;
    Sint32x2  :: 28;
    Sint32x3  :: 29;
    Sint32x4  :: 30;
    Force32   :: 2147483647;

    WGPUVertexFormat_Undefined :: Undefined;
    WGPUVertexFormat_Uint8x2   :: Uint8x2;
    WGPUVertexFormat_Uint8x4   :: Uint8x4;
    WGPUVertexFormat_Sint8x2   :: Sint8x2;
    WGPUVertexFormat_Sint8x4   :: Sint8x4;
    WGPUVertexFormat_Unorm8x2  :: Unorm8x2;
    WGPUVertexFormat_Unorm8x4  :: Unorm8x4;
    WGPUVertexFormat_Snorm8x2  :: Snorm8x2;
    WGPUVertexFormat_Snorm8x4  :: Snorm8x4;
    WGPUVertexFormat_Uint16x2  :: Uint16x2;
    WGPUVertexFormat_Uint16x4  :: Uint16x4;
    WGPUVertexFormat_Sint16x2  :: Sint16x2;
    WGPUVertexFormat_Sint16x4  :: Sint16x4;
    WGPUVertexFormat_Unorm16x2 :: Unorm16x2;
    WGPUVertexFormat_Unorm16x4 :: Unorm16x4;
    WGPUVertexFormat_Snorm16x2 :: Snorm16x2;
    WGPUVertexFormat_Snorm16x4 :: Snorm16x4;
    WGPUVertexFormat_Float16x2 :: Float16x2;
    WGPUVertexFormat_Float16x4 :: Float16x4;
    WGPUVertexFormat_Float32   :: Float32;
    WGPUVertexFormat_Float32x2 :: Float32x2;
    WGPUVertexFormat_Float32x3 :: Float32x3;
    WGPUVertexFormat_Float32x4 :: Float32x4;
    WGPUVertexFormat_Uint32    :: Uint32;
    WGPUVertexFormat_Uint32x2  :: Uint32x2;
    WGPUVertexFormat_Uint32x3  :: Uint32x3;
    WGPUVertexFormat_Uint32x4  :: Uint32x4;
    WGPUVertexFormat_Sint32    :: Sint32;
    WGPUVertexFormat_Sint32x2  :: Sint32x2;
    WGPUVertexFormat_Sint32x3  :: Sint32x3;
    WGPUVertexFormat_Sint32x4  :: Sint32x4;
    WGPUVertexFormat_Force32   :: Force32;
}

WGPUVertexStepMode :: enum u32 {
    Vertex              :: 0;
    Instance            :: 1;
    VertexBufferNotUsed :: 2;
    Force32             :: 2147483647;

    WGPUVertexStepMode_Vertex              :: Vertex;
    WGPUVertexStepMode_Instance            :: Instance;
    WGPUVertexStepMode_VertexBufferNotUsed :: VertexBufferNotUsed;
    WGPUVertexStepMode_Force32             :: Force32;
}

WGPUBufferUsage :: enum u32 {
    None         :: 0;
    MapRead      :: 1;
    MapWrite     :: 2;
    CopySrc      :: 4;
    CopyDst      :: 8;
    Index        :: 16;
    Vertex       :: 32;
    Uniform      :: 64;
    Storage      :: 128;
    Indirect     :: 256;
    QueryResolve :: 512;
    Force32      :: 2147483647;

    WGPUBufferUsage_None         :: None;
    WGPUBufferUsage_MapRead      :: MapRead;
    WGPUBufferUsage_MapWrite     :: MapWrite;
    WGPUBufferUsage_CopySrc      :: CopySrc;
    WGPUBufferUsage_CopyDst      :: CopyDst;
    WGPUBufferUsage_Index        :: Index;
    WGPUBufferUsage_Vertex       :: Vertex;
    WGPUBufferUsage_Uniform      :: Uniform;
    WGPUBufferUsage_Storage      :: Storage;
    WGPUBufferUsage_Indirect     :: Indirect;
    WGPUBufferUsage_QueryResolve :: QueryResolve;
    WGPUBufferUsage_Force32      :: Force32;
}

WGPUBufferUsageFlags :: WGPUFlags;

WGPUColorWriteMask :: enum u32 {
    None    :: 0;
    Red     :: 1;
    Green   :: 2;
    Blue    :: 4;
    Alpha   :: 8;
    All     :: 15;
    Force32 :: 2147483647;

    WGPUColorWriteMask_None    :: None;
    WGPUColorWriteMask_Red     :: Red;
    WGPUColorWriteMask_Green   :: Green;
    WGPUColorWriteMask_Blue    :: Blue;
    WGPUColorWriteMask_Alpha   :: Alpha;
    WGPUColorWriteMask_All     :: All;
    WGPUColorWriteMask_Force32 :: Force32;
}

WGPUColorWriteMaskFlags :: WGPUFlags;

WGPUMapMode :: enum u32 {
    None    :: 0;
    Read    :: 1;
    Write   :: 2;
    Force32 :: 2147483647;

    WGPUMapMode_None    :: None;
    WGPUMapMode_Read    :: Read;
    WGPUMapMode_Write   :: Write;
    WGPUMapMode_Force32 :: Force32;
}

WGPUMapModeFlags :: WGPUFlags;

WGPUShaderStage :: enum u32 {
    None     :: 0;
    Vertex   :: 1;
    Fragment :: 2;
    Compute  :: 4;
    Force32  :: 2147483647;

    WGPUShaderStage_None     :: None;
    WGPUShaderStage_Vertex   :: Vertex;
    WGPUShaderStage_Fragment :: Fragment;
    WGPUShaderStage_Compute  :: Compute;
    WGPUShaderStage_Force32  :: Force32;
}

WGPUShaderStageFlags :: WGPUFlags;

WGPUTextureUsage :: enum u32 {
    None             :: 0;
    CopySrc          :: 1;
    CopyDst          :: 2;
    TextureBinding   :: 4;
    StorageBinding   :: 8;
    RenderAttachment :: 16;
    Force32          :: 2147483647;

    WGPUTextureUsage_None             :: None;
    WGPUTextureUsage_CopySrc          :: CopySrc;
    WGPUTextureUsage_CopyDst          :: CopyDst;
    WGPUTextureUsage_TextureBinding   :: TextureBinding;
    WGPUTextureUsage_StorageBinding   :: StorageBinding;
    WGPUTextureUsage_RenderAttachment :: RenderAttachment;
    WGPUTextureUsage_Force32          :: Force32;
}

WGPUTextureUsageFlags :: WGPUFlags;

WGPUBufferMapCallback :: #type (status: WGPUBufferMapAsyncStatus, userdata: *void) -> void #c_call;
WGPUCompilationInfoCallback :: #type (status: WGPUCompilationInfoRequestStatus, compilationInfo: *WGPUCompilationInfo, userdata: *void) -> void #c_call;
WGPUCreateComputePipelineAsyncCallback :: #type (status: WGPUCreatePipelineAsyncStatus, pipeline: WGPUComputePipeline, message: *u8, userdata: *void) -> void #c_call;
WGPUCreateRenderPipelineAsyncCallback :: #type (status: WGPUCreatePipelineAsyncStatus, pipeline: WGPURenderPipeline, message: *u8, userdata: *void) -> void #c_call;
WGPUDeviceLostCallback :: #type (reason: WGPUDeviceLostReason, message: *u8, userdata: *void) -> void #c_call;
WGPUErrorCallback :: #type (type: WGPUErrorType, message: *u8, userdata: *void) -> void #c_call;
WGPUProc :: #type () -> void #c_call;
WGPUQueueWorkDoneCallback :: #type (status: WGPUQueueWorkDoneStatus, userdata: *void) -> void #c_call;
WGPURequestAdapterCallback :: #type (status: WGPURequestAdapterStatus, adapter: WGPUAdapter, message: *u8, userdata: *void) -> void #c_call;
WGPURequestDeviceCallback :: #type (status: WGPURequestDeviceStatus, device: WGPUDevice, message: *u8, userdata: *void) -> void #c_call;

WGPUChainedStruct :: struct {
    next:  *WGPUChainedStruct;
    sType: WGPUSType;
}

WGPUChainedStructOut :: struct {
    next:  *WGPUChainedStructOut;
    sType: WGPUSType;
}

// Structure forward declarations
WGPUAdapterProperties :: struct {
    nextInChain:       *WGPUChainedStructOut;
    vendorID:          u32;
    vendorName:        *u8;
    architecture:      *u8;
    deviceID:          u32;
    name:              *u8;
    driverDescription: *u8;
    adapterType:       WGPUAdapterType;
    backendType:       WGPUBackendType;
}

WGPUBindGroupEntry :: struct {
    nextInChain: *WGPUChainedStruct;
    binding:     u32;
    buffer:      WGPUBuffer;
    offset:      u64;
    size:        u64;
    sampler:     WGPUSampler;
    textureView: WGPUTextureView;
}

WGPUBlendComponent :: struct {
    operation: WGPUBlendOperation;
    srcFactor: WGPUBlendFactor;
    dstFactor: WGPUBlendFactor;
}

WGPUBufferBindingLayout :: struct {
    nextInChain:      *WGPUChainedStruct;
    type:             WGPUBufferBindingType;
    hasDynamicOffset: WGPUBool;
    minBindingSize:   u64;
}

WGPUBufferDescriptor :: struct {
    nextInChain:      *WGPUChainedStruct;
    label:            *u8;
    usage:            WGPUBufferUsageFlags;
    size:             u64;
    mappedAtCreation: WGPUBool;
}

WGPUColor :: struct {
    r: float64;
    g: float64;
    b: float64;
    a: float64;
}

WGPUCommandBufferDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
}

WGPUCommandEncoderDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
}

WGPUCompilationMessage :: struct {
    nextInChain:  *WGPUChainedStruct;
    message:      *u8;
    type:         WGPUCompilationMessageType;
    lineNum:      u64;
    linePos:      u64;
    offset:       u64;
    length:       u64;
    utf16LinePos: u64;
    utf16Offset:  u64;
    utf16Length:  u64;
}

WGPUComputePassTimestampWrites :: struct {
    querySet:                  WGPUQuerySet;
    beginningOfPassWriteIndex: u32;
    endOfPassWriteIndex:       u32;
}

WGPUConstantEntry :: struct {
    nextInChain: *WGPUChainedStruct;
    key:         *u8;
    value:       float64;
}

WGPUExtent3D :: struct {
    width:              u32;
    height:             u32;
    depthOrArrayLayers: u32;
}

WGPUInstanceDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
}

WGPULimits :: struct {
    maxTextureDimension1D:                     u32;
    maxTextureDimension2D:                     u32;
    maxTextureDimension3D:                     u32;
    maxTextureArrayLayers:                     u32;
    maxBindGroups:                             u32;
    maxBindGroupsPlusVertexBuffers:            u32;
    maxBindingsPerBindGroup:                   u32;
    maxDynamicUniformBuffersPerPipelineLayout: u32;
    maxDynamicStorageBuffersPerPipelineLayout: u32;
    maxSampledTexturesPerShaderStage:          u32;
    maxSamplersPerShaderStage:                 u32;
    maxStorageBuffersPerShaderStage:           u32;
    maxStorageTexturesPerShaderStage:          u32;
    maxUniformBuffersPerShaderStage:           u32;
    maxUniformBufferBindingSize:               u64;
    maxStorageBufferBindingSize:               u64;
    minUniformBufferOffsetAlignment:           u32;
    minStorageBufferOffsetAlignment:           u32;
    maxVertexBuffers:                          u32;
    maxBufferSize:                             u64;
    maxVertexAttributes:                       u32;
    maxVertexBufferArrayStride:                u32;
    maxInterStageShaderComponents:             u32;
    maxInterStageShaderVariables:              u32;
    maxColorAttachments:                       u32;
    maxColorAttachmentBytesPerSample:          u32;
    maxComputeWorkgroupStorageSize:            u32;
    maxComputeInvocationsPerWorkgroup:         u32;
    maxComputeWorkgroupSizeX:                  u32;
    maxComputeWorkgroupSizeY:                  u32;
    maxComputeWorkgroupSizeZ:                  u32;
    maxComputeWorkgroupsPerDimension:          u32;
}

WGPUMultisampleState :: struct {
    nextInChain:            *WGPUChainedStruct;
    count:                  u32;
    mask:                   u32;
    alphaToCoverageEnabled: WGPUBool;
}

WGPUOrigin3D :: struct {
    x: u32;
    y: u32;
    z: u32;
}

WGPUPipelineLayoutDescriptor :: struct {
    nextInChain:          *WGPUChainedStruct;
    label:                *u8;
    bindGroupLayoutCount: u64;
    bindGroupLayouts:     *WGPUBindGroupLayout;
}

// Can be chained in WGPUPrimitiveState
WGPUPrimitiveDepthClipControl :: struct {
    chain:          WGPUChainedStruct;
    unclippedDepth: WGPUBool;
}

WGPUPrimitiveState :: struct {
    nextInChain:      *WGPUChainedStruct;
    topology:         WGPUPrimitiveTopology;
    stripIndexFormat: WGPUIndexFormat;
    frontFace:        WGPUFrontFace;
    cullMode:         WGPUCullMode;
}

WGPUQuerySetDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
    type:        WGPUQueryType;
    count:       u32;
}

WGPUQueueDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
}

WGPURenderBundleDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
}

WGPURenderBundleEncoderDescriptor :: struct {
    nextInChain:        *WGPUChainedStruct;
    label:              *u8;
    colorFormatCount:   u64;
    colorFormats:       *WGPUTextureFormat;
    depthStencilFormat: WGPUTextureFormat;
    sampleCount:        u32;
    depthReadOnly:      WGPUBool;
    stencilReadOnly:    WGPUBool;
}

WGPURenderPassDepthStencilAttachment :: struct {
    view:              WGPUTextureView;
    depthLoadOp:       WGPULoadOp;
    depthStoreOp:      WGPUStoreOp;
    depthClearValue:   float;
    depthReadOnly:     WGPUBool;
    stencilLoadOp:     WGPULoadOp;
    stencilStoreOp:    WGPUStoreOp;
    stencilClearValue: u32;
    stencilReadOnly:   WGPUBool;
}

// Can be chained in WGPURenderPassDescriptor
WGPURenderPassDescriptorMaxDrawCount :: struct {
    chain:        WGPUChainedStruct;
    maxDrawCount: u64;
}

WGPURenderPassTimestampWrites :: struct {
    querySet:                  WGPUQuerySet;
    beginningOfPassWriteIndex: u32;
    endOfPassWriteIndex:       u32;
}

WGPURequestAdapterOptions :: struct {
    nextInChain:          *WGPUChainedStruct;
    compatibleSurface:    WGPUSurface;
    powerPreference:      WGPUPowerPreference;
    backendType:          WGPUBackendType;
    forceFallbackAdapter: WGPUBool;
}

WGPUSamplerBindingLayout :: struct {
    nextInChain: *WGPUChainedStruct;
    type:        WGPUSamplerBindingType;
}

WGPUSamplerDescriptor :: struct {
    nextInChain:   *WGPUChainedStruct;
    label:         *u8;
    addressModeU:  WGPUAddressMode;
    addressModeV:  WGPUAddressMode;
    addressModeW:  WGPUAddressMode;
    magFilter:     WGPUFilterMode;
    minFilter:     WGPUFilterMode;
    mipmapFilter:  WGPUMipmapFilterMode;
    lodMinClamp:   float;
    lodMaxClamp:   float;
    compare:       WGPUCompareFunction;
    maxAnisotropy: u16;
}

WGPUShaderModuleCompilationHint :: struct {
    nextInChain: *WGPUChainedStruct;
    entryPoint:  *u8;
    layout:      WGPUPipelineLayout;
}

// Can be chained in WGPUShaderModuleDescriptor
WGPUShaderModuleSPIRVDescriptor :: struct {
    chain:    WGPUChainedStruct;
    codeSize: u32;
    code:     *u32;
}

// Can be chained in WGPUShaderModuleDescriptor
WGPUShaderModuleWGSLDescriptor :: struct {
    chain: WGPUChainedStruct;
    code:  *u8;
}

WGPUStencilFaceState :: struct {
    compare:     WGPUCompareFunction;
    failOp:      WGPUStencilOperation;
    depthFailOp: WGPUStencilOperation;
    passOp:      WGPUStencilOperation;
}

WGPUStorageTextureBindingLayout :: struct {
    nextInChain:   *WGPUChainedStruct;
    access:        WGPUStorageTextureAccess;
    format:        WGPUTextureFormat;
    viewDimension: WGPUTextureViewDimension;
}

WGPUSurfaceCapabilities :: struct {
    nextInChain:      *WGPUChainedStructOut;
    formatCount:      u64;
    formats:          *WGPUTextureFormat;
    presentModeCount: u64;
    presentModes:     *WGPUPresentMode;
    alphaModeCount:   u64;
    alphaModes:       *WGPUCompositeAlphaMode;
}

WGPUSurfaceConfiguration :: struct {
    nextInChain:     *WGPUChainedStruct;
    device:          WGPUDevice;
    format:          WGPUTextureFormat;
    usage:           WGPUTextureUsageFlags;
    viewFormatCount: u64;
    viewFormats:     *WGPUTextureFormat;
    alphaMode:       WGPUCompositeAlphaMode;
    width:           u32;
    height:          u32;
    presentMode:     WGPUPresentMode;
}

WGPUSurfaceDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromAndroidNativeWindow :: struct {
    chain:  WGPUChainedStruct;
    window: *void;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromCanvasHTMLSelector :: struct {
    chain:    WGPUChainedStruct;
    selector: *u8;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromMetalLayer :: struct {
    chain: WGPUChainedStruct;
    layer: *void;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromWaylandSurface :: struct {
    chain:   WGPUChainedStruct;
    display: *void;
    surface: *void;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromWindowsHWND :: struct {
    chain:     WGPUChainedStruct;
    hinstance: *void;
    hwnd:      *void;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromXcbWindow :: struct {
    chain:      WGPUChainedStruct;
    connection: *void;
    window:     u32;
}

// Can be chained in WGPUSurfaceDescriptor
WGPUSurfaceDescriptorFromXlibWindow :: struct {
    chain:   WGPUChainedStruct;
    display: *void;
    window:  u64;
}

WGPUSurfaceTexture :: struct {
    texture:    WGPUTexture;
    suboptimal: WGPUBool;
    status:     WGPUSurfaceGetCurrentTextureStatus;
}

WGPUTextureBindingLayout :: struct {
    nextInChain:   *WGPUChainedStruct;
    sampleType:    WGPUTextureSampleType;
    viewDimension: WGPUTextureViewDimension;
    multisampled:  WGPUBool;
}

WGPUTextureDataLayout :: struct {
    nextInChain:  *WGPUChainedStruct;
    offset:       u64;
    bytesPerRow:  u32;
    rowsPerImage: u32;
}

WGPUTextureViewDescriptor :: struct {
    nextInChain:     *WGPUChainedStruct;
    label:           *u8;
    format:          WGPUTextureFormat;
    dimension:       WGPUTextureViewDimension;
    baseMipLevel:    u32;
    mipLevelCount:   u32;
    baseArrayLayer:  u32;
    arrayLayerCount: u32;
    aspect:          WGPUTextureAspect;
}

WGPUVertexAttribute :: struct {
    format:         WGPUVertexFormat;
    offset:         u64;
    shaderLocation: u32;
}

WGPUBindGroupDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
    layout:      WGPUBindGroupLayout;
    entryCount:  u64;
    entries:     *WGPUBindGroupEntry;
}

WGPUBindGroupLayoutEntry :: struct {
    nextInChain:    *WGPUChainedStruct;
    binding:        u32;
    visibility:     WGPUShaderStageFlags;
    buffer:         WGPUBufferBindingLayout;
    sampler:        WGPUSamplerBindingLayout;
    texture:        WGPUTextureBindingLayout;
    storageTexture: WGPUStorageTextureBindingLayout;
}

WGPUBlendState :: struct {
    color: WGPUBlendComponent;
    alpha: WGPUBlendComponent;
}

WGPUCompilationInfo :: struct {
    nextInChain:  *WGPUChainedStruct;
    messageCount: u64;
    messages:     *WGPUCompilationMessage;
}

WGPUComputePassDescriptor :: struct {
    nextInChain:     *WGPUChainedStruct;
    label:           *u8;
    timestampWrites: *WGPUComputePassTimestampWrites;
}

WGPUDepthStencilState :: struct {
    nextInChain:         *WGPUChainedStruct;
    format:              WGPUTextureFormat;
    depthWriteEnabled:   WGPUBool;
    depthCompare:        WGPUCompareFunction;
    stencilFront:        WGPUStencilFaceState;
    stencilBack:         WGPUStencilFaceState;
    stencilReadMask:     u32;
    stencilWriteMask:    u32;
    depthBias:           s32;
    depthBiasSlopeScale: float;
    depthBiasClamp:      float;
}

WGPUImageCopyBuffer :: struct {
    nextInChain: *WGPUChainedStruct;
    layout:      WGPUTextureDataLayout;
    buffer:      WGPUBuffer;
}

WGPUImageCopyTexture :: struct {
    nextInChain: *WGPUChainedStruct;
    texture:     WGPUTexture;
    mipLevel:    u32;
    origin:      WGPUOrigin3D;
    aspect:      WGPUTextureAspect;
}

WGPUProgrammableStageDescriptor :: struct {
    nextInChain:   *WGPUChainedStruct;
    module:        WGPUShaderModule;
    entryPoint:    *u8;
    constantCount: u64;
    constants:     *WGPUConstantEntry;
}

WGPURenderPassColorAttachment :: struct {
    nextInChain:   *WGPUChainedStruct;
    view:          WGPUTextureView;
    resolveTarget: WGPUTextureView;
    loadOp:        WGPULoadOp;
    storeOp:       WGPUStoreOp;
    clearValue:    WGPUColor;
}

WGPURequiredLimits :: struct {
    nextInChain: *WGPUChainedStruct;
    limits:      WGPULimits;
}

WGPUShaderModuleDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
    hintCount:   u64;
    hints:       *WGPUShaderModuleCompilationHint;
}

WGPUSupportedLimits :: struct {
    nextInChain: *WGPUChainedStructOut;
    limits:      WGPULimits;
}

WGPUTextureDescriptor :: struct {
    nextInChain:     *WGPUChainedStruct;
    label:           *u8;
    usage:           WGPUTextureUsageFlags;
    dimension:       WGPUTextureDimension;
    size:            WGPUExtent3D;
    format:          WGPUTextureFormat;
    mipLevelCount:   u32;
    sampleCount:     u32;
    viewFormatCount: u64;
    viewFormats:     *WGPUTextureFormat;
}

WGPUVertexBufferLayout :: struct {
    arrayStride:    u64;
    stepMode:       WGPUVertexStepMode;
    attributeCount: u64;
    attributes:     *WGPUVertexAttribute;
}

WGPUBindGroupLayoutDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
    entryCount:  u64;
    entries:     *WGPUBindGroupLayoutEntry;
}

WGPUColorTargetState :: struct {
    nextInChain: *WGPUChainedStruct;
    format:      WGPUTextureFormat;
    blend:       *WGPUBlendState;
    writeMask:   WGPUColorWriteMaskFlags;
}

WGPUComputePipelineDescriptor :: struct {
    nextInChain: *WGPUChainedStruct;
    label:       *u8;
    layout:      WGPUPipelineLayout;
    compute:     WGPUProgrammableStageDescriptor;
}

WGPUDeviceDescriptor :: struct {
    nextInChain:          *WGPUChainedStruct;
    label:                *u8;
    requiredFeatureCount: u64;
    requiredFeatures:     *WGPUFeatureName;
    requiredLimits:       *WGPURequiredLimits;
    defaultQueue:         WGPUQueueDescriptor;
    deviceLostCallback:   WGPUDeviceLostCallback;
    deviceLostUserdata:   *void;
}

WGPURenderPassDescriptor :: struct {
    nextInChain:            *WGPUChainedStruct;
    label:                  *u8;
    colorAttachmentCount:   u64;
    colorAttachments:       *WGPURenderPassColorAttachment;
    depthStencilAttachment: *WGPURenderPassDepthStencilAttachment;
    occlusionQuerySet:      WGPUQuerySet;
    timestampWrites:        *WGPURenderPassTimestampWrites;
}

WGPUVertexState :: struct {
    nextInChain:   *WGPUChainedStruct;
    module:        WGPUShaderModule;
    entryPoint:    *u8;
    constantCount: u64;
    constants:     *WGPUConstantEntry;
    bufferCount:   u64;
    buffers:       *WGPUVertexBufferLayout;
}

WGPUFragmentState :: struct {
    nextInChain:   *WGPUChainedStruct;
    module:        WGPUShaderModule;
    entryPoint:    *u8;
    constantCount: u64;
    constants:     *WGPUConstantEntry;
    targetCount:   u64;
    targets:       *WGPUColorTargetState;
}

WGPURenderPipelineDescriptor :: struct {
    nextInChain:  *WGPUChainedStruct;
    label:        *u8;
    layout:       WGPUPipelineLayout;
    vertex:       WGPUVertexState;
    primitive:    WGPUPrimitiveState;
    depthStencil: *WGPUDepthStencilState;
    multisample:  WGPUMultisampleState;
    fragment:     *WGPUFragmentState;
}

WGPUNativeSType :: enum u32 {
    WGPUSType_DeviceExtras               :: 196609;
    WGPUSType_RequiredLimitsExtras       :: 196610;
    WGPUSType_PipelineLayoutExtras       :: 196611;
    WGPUSType_ShaderModuleGLSLDescriptor :: 196612;
    WGPUSType_SupportedLimitsExtras      :: 196613;
    WGPUSType_InstanceExtras             :: 196614;
    WGPUSType_BindGroupEntryExtras       :: 196615;
    WGPUSType_BindGroupLayoutEntryExtras :: 196616;
    WGPUSType_QuerySetDescriptorExtras   :: 196617;
    WGPUSType_SurfaceConfigurationExtras :: 196618;
    Force32                              :: 2147483647;
    WGPUNativeSType_Force32 :: Force32;
}

WGPUNativeFeature :: enum u32 {
    PushConstants                                         :: 196609;
    TextureAdapterSpecificFormatFeatures                  :: 196610;
    MultiDrawIndirect                                     :: 196611;
    MultiDrawIndirectCount                                :: 196612;
    VertexWritableStorage                                 :: 196613;
    TextureBindingArray                                   :: 196614;
    SampledTextureAndStorageBufferArrayNonUniformIndexing :: 196615;
    PipelineStatisticsQuery                               :: 196616;
    StorageResourceBindingArray                           :: 196617;
    PartiallyBoundBindingArray                            :: 196618;
    Force32                                               :: 2147483647;

    WGPUNativeFeature_PushConstants                                         :: PushConstants;
    WGPUNativeFeature_TextureAdapterSpecificFormatFeatures                  :: TextureAdapterSpecificFormatFeatures;
    WGPUNativeFeature_MultiDrawIndirect                                     :: MultiDrawIndirect;
    WGPUNativeFeature_MultiDrawIndirectCount                                :: MultiDrawIndirectCount;
    WGPUNativeFeature_VertexWritableStorage                                 :: VertexWritableStorage;
    WGPUNativeFeature_TextureBindingArray                                   :: TextureBindingArray;
    WGPUNativeFeature_SampledTextureAndStorageBufferArrayNonUniformIndexing :: SampledTextureAndStorageBufferArrayNonUniformIndexing;
    WGPUNativeFeature_PipelineStatisticsQuery                               :: PipelineStatisticsQuery;
    WGPUNativeFeature_StorageResourceBindingArray                           :: StorageResourceBindingArray;
    WGPUNativeFeature_PartiallyBoundBindingArray                            :: PartiallyBoundBindingArray;
    WGPUNativeFeature_Force32                                               :: Force32;
}

WGPULogLevel :: enum u32 {
    Off     :: 0;
    Error   :: 1;
    Warn    :: 2;
    Info    :: 3;
    Debug   :: 4;
    Trace   :: 5;
    Force32 :: 2147483647;

    WGPULogLevel_Off     :: Off;
    WGPULogLevel_Error   :: Error;
    WGPULogLevel_Warn    :: Warn;
    WGPULogLevel_Info    :: Info;
    WGPULogLevel_Debug   :: Debug;
    WGPULogLevel_Trace   :: Trace;
    WGPULogLevel_Force32 :: Force32;
}

WGPUInstanceBackend :: enum u32 {
    All           :: 0;
    Vulkan        :: 1;
    GL            :: 2;
    Metal         :: 4;
    DX12          :: 8;
    DX11          :: 16;
    BrowserWebGPU :: 32;
    Primary       :: 45;

    Secondary     :: 18;
    Force32       :: 2147483647;

    WGPUInstanceBackend_All           :: All;
    WGPUInstanceBackend_Vulkan        :: Vulkan;
    WGPUInstanceBackend_GL            :: GL;
    WGPUInstanceBackend_Metal         :: Metal;
    WGPUInstanceBackend_DX12          :: DX12;
    WGPUInstanceBackend_DX11          :: DX11;
    WGPUInstanceBackend_BrowserWebGPU :: BrowserWebGPU;
    WGPUInstanceBackend_Primary       :: Primary;

    WGPUInstanceBackend_Secondary     :: Secondary;
    WGPUInstanceBackend_Force32       :: Force32;
}

WGPUInstanceBackendFlags :: WGPUFlags;

WGPUInstanceFlag :: enum u32 {
    Default          :: 0;
    Debug            :: 1;
    Validation       :: 2;
    DiscardHalLabels :: 4;
    Force32          :: 2147483647;

    WGPUInstanceFlag_Default          :: Default;
    WGPUInstanceFlag_Debug            :: Debug;
    WGPUInstanceFlag_Validation       :: Validation;
    WGPUInstanceFlag_DiscardHalLabels :: DiscardHalLabels;
    WGPUInstanceFlag_Force32          :: Force32;
}

WGPUInstanceFlags :: WGPUFlags;

WGPUDx12Compiler :: enum u32 {
    Undefined :: 0;
    Fxc       :: 1;
    Dxc       :: 2;
    Force32   :: 2147483647;

    WGPUDx12Compiler_Undefined :: Undefined;
    WGPUDx12Compiler_Fxc       :: Fxc;
    WGPUDx12Compiler_Dxc       :: Dxc;
    WGPUDx12Compiler_Force32   :: Force32;
}

WGPUGles3MinorVersion :: enum u32 {
    Automatic :: 0;
    Version0  :: 1;
    Version1  :: 2;
    Version2  :: 3;
    Force32   :: 2147483647;

    WGPUGles3MinorVersion_Automatic :: Automatic;
    WGPUGles3MinorVersion_Version0  :: Version0;
    WGPUGles3MinorVersion_Version1  :: Version1;
    WGPUGles3MinorVersion_Version2  :: Version2;
    WGPUGles3MinorVersion_Force32   :: Force32;
}

WGPUPipelineStatisticName :: enum u32 {
    VertexShaderInvocations   :: 0;
    ClipperInvocations        :: 1;
    ClipperPrimitivesOut      :: 2;
    FragmentShaderInvocations :: 3;
    ComputeShaderInvocations  :: 4;
    Force32                   :: 2147483647;

    WGPUPipelineStatisticName_VertexShaderInvocations   :: VertexShaderInvocations;
    WGPUPipelineStatisticName_ClipperInvocations        :: ClipperInvocations;
    WGPUPipelineStatisticName_ClipperPrimitivesOut      :: ClipperPrimitivesOut;
    WGPUPipelineStatisticName_FragmentShaderInvocations :: FragmentShaderInvocations;
    WGPUPipelineStatisticName_ComputeShaderInvocations  :: ComputeShaderInvocations;
    WGPUPipelineStatisticName_Force32                   :: Force32;
}

WGPUNativeQueryType :: enum u32 {
    PipelineStatistics :: 196608;
    Force32            :: 2147483647;

    WGPUNativeQueryType_PipelineStatistics :: PipelineStatistics;
    WGPUNativeQueryType_Force32            :: Force32;
}

WGPUInstanceExtras :: struct {
    chain:              WGPUChainedStruct;
    backends:           WGPUInstanceBackendFlags;
    flags:              WGPUInstanceFlags;
    dx12ShaderCompiler: WGPUDx12Compiler;
    gles3MinorVersion:  WGPUGles3MinorVersion;
    dxilPath:           *u8;
    dxcPath:            *u8;
}

WGPUDeviceExtras :: struct {
    chain:     WGPUChainedStruct;
    tracePath: *u8;
}

WGPUNativeLimits :: struct {
    maxPushConstantSize:   u32;
    maxNonSamplerBindings: u32;
}

WGPURequiredLimitsExtras :: struct {
    chain:  WGPUChainedStruct;
    limits: WGPUNativeLimits;
}

WGPUSupportedLimitsExtras :: struct {
    chain:  WGPUChainedStructOut;
    limits: WGPUNativeLimits;
}

WGPUPushConstantRange :: struct {
    stages: WGPUShaderStageFlags;
    start:  u32;
    end:    u32;
}

WGPUPipelineLayoutExtras :: struct {
    chain:                  WGPUChainedStruct;
    pushConstantRangeCount: u64;
    pushConstantRanges:     *WGPUPushConstantRange;
}

WGPUSubmissionIndex :: u64;

WGPUWrappedSubmissionIndex :: struct {
    queue:           WGPUQueue;
    submissionIndex: WGPUSubmissionIndex;
}

WGPUShaderDefine :: struct {
    name:  *u8;
    value: *u8;
}

WGPUShaderModuleGLSLDescriptor :: struct {
    chain:       WGPUChainedStruct;
    stage:       WGPUShaderStage;
    code:        *u8;
    defineCount: u32;
    defines:     *WGPUShaderDefine;
}

WGPURegistryReport :: struct {
    numAllocated:        u64;
    numKeptFromUser:     u64;
    numReleasedFromUser: u64;
    numError:            u64;
    elementSize:         u64;
}

WGPUHubReport :: struct {
    adapters:         WGPURegistryReport;
    devices:          WGPURegistryReport;
    queues:           WGPURegistryReport;
    pipelineLayouts:  WGPURegistryReport;
    shaderModules:    WGPURegistryReport;
    bindGroupLayouts: WGPURegistryReport;
    bindGroups:       WGPURegistryReport;
    commandBuffers:   WGPURegistryReport;
    renderBundles:    WGPURegistryReport;
    renderPipelines:  WGPURegistryReport;
    computePipelines: WGPURegistryReport;
    querySets:        WGPURegistryReport;
    buffers:          WGPURegistryReport;
    textures:         WGPURegistryReport;
    textureViews:     WGPURegistryReport;
    samplers:         WGPURegistryReport;
}

WGPUGlobalReport :: struct {
    surfaces:    WGPURegistryReport;
    backendType: WGPUBackendType;
    vulkan:      WGPUHubReport;
    metal:       WGPUHubReport;
    dx12:        WGPUHubReport;
    gl:          WGPUHubReport;
}

WGPUInstanceEnumerateAdapterOptions :: struct {
    nextInChain: *WGPUChainedStruct;
    backends:    WGPUInstanceBackendFlags;
}

WGPUBindGroupEntryExtras :: struct {
    chain:            WGPUChainedStruct;
    buffers:          *WGPUBuffer;
    bufferCount:      u64;
    samplers:         *WGPUSampler;
    samplerCount:     u64;
    textureViews:     *WGPUTextureView;
    textureViewCount: u64;
}

WGPUBindGroupLayoutEntryExtras :: struct {
    chain: WGPUChainedStruct;
    count: u32;
}

WGPUQuerySetDescriptorExtras :: struct {
    chain:                  WGPUChainedStruct;
    pipelineStatistics:     *WGPUPipelineStatisticName;
    pipelineStatisticCount: u64;
}

WGPUSurfaceConfigurationExtras :: struct {
    chain:                      WGPUChainedStruct;
    desiredMaximumFrameLatency: WGPUBool;
}

WGPULogCallback :: #type (level: WGPULogLevel, message: *u8, userdata: *void) -> void #c_call;
